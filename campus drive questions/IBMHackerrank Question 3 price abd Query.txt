import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'countMinimumOperations' function below.
     *
     * The function is expected to return a LONG_INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY price
     *  2. INTEGER_ARRAY query
     */

    public static List<Long> countMinimumOperations(List<Integer> price, List<Integer> query) {
    // Write your code here
    

//price =[1,2,3] query=[3,2,1,5] i.e - query 3 no of operation =3 *price 1+2 2+1 3+0 =1+2+0 =3
+   output should be = [3,2,3,9]  
  
     // Sort the price list
        Collections.sort(price);

        // Precompute cumulative sums for sorted prices
        int n = price.size();
        long[] cumulativeSum = new long[n];
        cumulativeSum[0] = price.get(0);
        for (int i = 1; i < n; i++) {
            cumulativeSum[i] = cumulativeSum[i - 1] + price.get(i);
        }

        List<Long> result = new ArrayList<>();
        
        for (int q : query) {
            // Use binary search to find the first element >= query
            int idx = Collections.binarySearch(price, q);
            if (idx < 0) {
                idx = -(idx + 1);
            }

            long sumLeft = 0;
            long sumRight = 0;

            // Left side (prices smaller than query)
            if (idx > 0) {
                sumLeft = (long) q * idx - cumulativeSum[idx - 1];
            }

            // Right side (prices larger than or equal to query)
            if (idx < n) {
                sumRight = (cumulativeSum[n - 1] - (idx > 0 ? cumulativeSum[idx - 1] : 0)) - (long) q * (n - idx);
            }

            result.add(sumLeft + sumRight);
        }

        return result;
  
    }
   

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int priceCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> price = IntStream.range(0, priceCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int queryCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> query = IntStream.range(0, queryCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        List<Long> result = Result.countMinimumOperations(price, query);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
